// Generated by CoffeeScript 1.12.7

/**
  Layer Base Object
  Layer基类
  create by byron.song on 2015.10.16
 */
var BaseSwallowLayer;

BaseSwallowLayer = function() {
  this.$id = 'baseSwallowLayer';
  this.$init = 'init';
  this.$ez = null;
  this.$resourceUtil = null;
  this.$logger = null;
  this.$ccbLoader = null;
  this.$socketClient = null;
  this.$display = null;
  this.$topic = null;
  this.$userData = null;
  this.$gTblContainer = null;
  this.$configData = null;
  this.$formDialog = null;
  this.$redDot = null;
  this.ctor = null;
};

BaseSwallowLayer.prototype.init = function() {
  var self;
  self = this;
  this.ctor = cc.Layer.extend({
    ctor: function(params) {
      this._super();
      this.log = self.$logger.log;
      this.info = self.$logger.info;
      this.error = self.$logger.error;
      this.isDebugEnabled = self.$logger.isDebugEnabled;
      this.isInfoEnabled = self.$logger.isInfoEnabled;
      this.ez = self.$ez;
      this.display = self.$display;
      this.topic = self.$topic;
      this.userData = self.$userData;
      this.gTblContainer = self.$gTblContainer;
      this.ccbLoader = self.$ccbLoader;
      this.resourceUtil = self.$resourceUtil;
      this.socketClient = self.$socketClient;
      this.configData = self.$configData;
      this.formDialog = self.$formDialog;
      this.redDot = self.$redDot;
      this.setContentSize(params.sizeContent);
    },
    onEnter: function() {
      var _this;
      this.log("onEnter", this.__classId);
      this._super();
      _this = this;
      this._listener_base = cc.EventListener.create({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: false,
        onTouchBegan: function(selTouch, event) {
          return _this.onTouchBegan(selTouch, event);
        },
        onTouchMoved: function(selTouch, event) {
          return _this.onTouchMoved(selTouch, event);
        },
        onTouchEnded: function(selTouch, event) {
          return _this.onTouchEnded(selTouch, event);
        },
        onTouchCancelled: function(selTouch, event) {
          return _this.onTouchCancelled(selTouch, event);
        }
      });
      this._listener_base._setFixedPriority(1);
      return cc.eventManager.addListener(this._listener_base, this);
    },
    onExit: function() {
      this.cleanShoudian();
      this.log("onExit", this.__classId);
      this.removeTouchListener();
      return this._super();
    },
    removeTouchListener: function() {
      if (this._listener_base) {
        cc.eventManager.removeListener(this._listener_base);
        this._listener_base.onTouchBegan = void 0;
        this._listener_base.onTouchMoved = void 0;
        this._listener_base.onTouchEnded = void 0;
        this._listener_base.onTouchCancelled = void 0;
      }
      return this._listener_base = void 0;
    },
    cleanup: function() {
      var i, len, outletName, ref;
      this.isAlreadyCleanUp = this.__instanceId;
      this.__topLayer = void 0;
      if (this.__ccbOutletNames) {
        ref = this.__ccbOutletNames;
        for (i = 0, len = ref.length; i < len; i++) {
          outletName = ref[i];
          this[outletName] = void 0;
        }
      }
      return this._super();
    },
    onTouchBegan: function() {
      this.log("onTouchBegan", this.__classId);
      return true;
    },
    onTouchMoved: function() {
      return true;
    },
    onTouchEnded: function() {
      this.log("onTouchEnded", this.__classId);
      return true;
    },
    onTouchCancelled: function() {
      return true;
    },
    setVisible: function(isVisible) {
      if (this._visible !== isVisible) {
        this._swallowTouches(isVisible);
      }
      return this._super(isVisible);
    },
    _swallowTouches: function(swallowTouches) {
      if (this._listener_base) {
        return this._listener_base.swallowTouches = swallowTouches;
      }
    }
  });
};

BaseSwallowLayer.prototype.get = function(params) {
  return new this.ctor(params);
};

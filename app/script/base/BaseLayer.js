// Generated by CoffeeScript 1.12.7

/**
  Layer Base Object
  Layer基类
  create by byron.song on 2015.10.16
 */
var BaseLayer;

BaseLayer = function() {
  this.$id = 'baseLayer';
  this.$init = 'init';
  this.$ez = null;
  this.$resourceUtil = null;
  this.$logger = null;
  this.$ccbLoader = null;
  this.$socketClient = null;
  this.$display = null;
  this.$topic = null;
  this.$userData = null;
  this.$gTblContainer = null;
  this.$configData = null;
  this.$formDialog = null;
  this.$redDot = null;
  this.ctor = null;
};

BaseLayer.prototype.init = function() {
  var self;
  self = this;
  this.ctor = cc.Layer.extend({
    ctor: function(classDefine, isAppend) {
      this._super();
      this.log = self.$logger.log;
      this.info = self.$logger.info;
      this.error = self.$logger.error;
      this.isDebugEnabled = self.$logger.isDebugEnabled;
      this.isInfoEnabled = self.$logger.isInfoEnabled;
      this.setContentSize(720, 1280);
      this.ez = self.$ez;
      this.display = self.$display;
      this.topic = self.$topic;
      this.userData = self.$userData;
      this.gTblContainer = self.$gTblContainer;
      this.ccbLoader = self.$ccbLoader;
      this.resourceUtil = self.$resourceUtil;
      this.socketClient = self.$socketClient;
      this.configData = self.$configData;
      this.formDialog = self.$formDialog;
      this.redDot = self.$redDot;
      this.__classId = "BaseLayer";
      if (classDefine) {
        this.__classDefine = classDefine;
        this.__classId = classDefine.$id;
        this.__isAppendLayer = classDefine.isAppendLayer;
      }
      this.bannerType = cz.BannerType.OTHER;
    },
    onEnter: function() {
      var _this, gameBody, scene, widthScale;
      this.log("onEnter", this.__classId);
      this._super();
      _this = this;
      this._listener_base = cc.EventListener.create({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: false,
        onTouchBegan: function(selTouch, event) {
          return _this.onTouchBegan(selTouch, event);
        },
        onTouchMoved: function(selTouch, event) {
          return _this.onTouchMoved(selTouch, event);
        },
        onTouchEnded: function(selTouch, event) {
          return _this.onTouchEnded(selTouch, event);
        },
        onTouchCancelled: function(selTouch, event) {
          return _this.onTouchCancelled(selTouch, event);
        }
      });
      this._listener_base._setFixedPriority(1);
      cc.eventManager.addListener(this._listener_base, this);
      this._messageDefineMap = {};
      this._messageSerialMap = {};
      this._isTopicSubcribe = false;
      this._control4MsgMap = {};
      if (cc.MenuItemTouchBeganTarget) {
        cc.MenuItemTouchBeganTarget._state = cc.MENU_STATE_WAITING;
        cc.MenuItemTouchBeganTarget = void 0;
      }
      this.log('@userData.eduIdx = ', this.userData.eduIdx);
      this.subscribe(cz.MSG_RENWU_EDU_START, this.taskEdu);
      if (cc.sys.isMobile && cz.isAdaption) {
        gameBody = document.getElementById("gameBody");
        widthScale = (1280 / 720) / (gameBody.clientHeight / gameBody.clientWidth);
        cc.view.setDesignResolutionSize(720 * widthScale, 1280, cc.ResolutionPolicy.SHOW_ALL);
        scene = cc.director.getRunningScene();
        if (scene && scene.adjustPositionX) {
          return scene.adjustPositionX();
        }
      }
    },
    onExit: function() {
      this.log("onExit", this.__classId);
      if (this._messageDefineMap) {
        return self.$socketClient.unregisterAllOnTarget(this);
      }
    },
    removeTouchListener: function() {
      if (this._listener_base) {
        cc.eventManager.removeListener(this._listener_base);
        this._listener_base.onTouchBegan = void 0;
        this._listener_base.onTouchMoved = void 0;
        this._listener_base.onTouchEnded = void 0;
        this._listener_base.onTouchCancelled = void 0;
      }
      return this._listener_base = void 0;
    },
    cleanup: function() {
      var j, len1, outletName, ref;
      this.isAlreadyCleanUp = this.__instanceId;
      this.__topLayer = void 0;
      if (this.__ccbOutletNames) {
        ref = this.__ccbOutletNames;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          outletName = ref[j];
          this[outletName] = void 0;
        }
      }
      return this._super();
    },
    clearCellOutCCBList: function(cell) {
      var NodeObj, j, len1, ref;
      if (cell && cell._outCCBList) {
        ref = cell._outCCBList;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          NodeObj = ref[j];
          this.clearCellCCB(NodeObj);
        }
        return cell._outCCBList = void 0;
      }
    },
    addCelloutCCBList: function(cell, NodeObj) {
      if (cell && NodeObj) {
        if (!cell._outCCBList) {
          cell._outCCBList = [];
        }
        return cell._outCCBList.push(NodeObj);
      }
    },
    clearCellCCB: function(Nodeobj) {
      var j, len1, outletName, ref, results;
      if (Nodeobj && Nodeobj.__ccbOutletNames) {
        ref = Nodeobj.__ccbOutletNames;
        results = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          outletName = ref[j];
          results.push(Nodeobj[outletName] = void 0);
        }
        return results;
      }
    },
    clearCell: function(cell) {
      var i, j, ref;
      this.clearCellOutCCBList(cell);
      if (cell && cell._ccb) {
        if (cc.isArray(cell._ccb)) {
          for (i = j = 0, ref = cell._ccb.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            this.clearCellCCB(cell._ccb[i].getParent());
            cell._ccb[i] = void 0;
          }
        } else {
          this.clearCellCCB(cell);
        }
        cell._ccb = void 0;
        this.log('clear used cell');
        cell.removeAllChildren();
        return cell.removeFromParent();
      }
    },
    clearTableView: function() {
      var cell, cellsFreed, cellsUsed, count, i, j, k, l, m, ref, ref1, ref2, ref3;
      if (this.tableView) {
        cellsFreed = this.tableView._cellsFreed;
        count = cellsFreed.count();
        for (i = j = 0, ref = count - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          cell = cellsFreed.objectAtIndex(i);
          if (cell && cell._ccb) {
            this.clearCell(cell);
            cell = void 0;
          }
        }
        for (i = k = 0, ref1 = count - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
          cellsFreed.removeObjectAtIndex(count - 1 - i);
        }
        cellsFreed = void 0;
        cellsUsed = this.tableView._cellsUsed;
        count = cellsUsed.count();
        for (i = l = 0, ref2 = count - 1; 0 <= ref2 ? l <= ref2 : l >= ref2; i = 0 <= ref2 ? ++l : --l) {
          cell = cellsUsed.objectAtIndex(i);
          this.clearCell(cell);
          cell = void 0;
        }
        for (i = m = 0, ref3 = count - 1; 0 <= ref3 ? m <= ref3 : m >= ref3; i = 0 <= ref3 ? ++m : --m) {
          cellsUsed.removeObjectAtIndex(count - 1 - i);
        }
        cellsUsed = void 0;
        return this.tableView = void 0;
      }
    },
    onTouchBegan: function(touch, event) {
      var all, allImgFile, chileren, pos, target;
      if (touch) {
        pos = touch.getLocation();
        target = event.getCurrentTarget();
        chileren = target.getChildren();
        all = this.ez.getTouchNodeByPos(chileren, pos);
        allImgFile = this.ez.getNodeListImg(all);
        this.log("onTouchImgURL", allImgFile);
      }
      this.log("onTouchBegan", this.__classId);
      return true;
    },
    onTouchMoved: function() {
      return true;
    },
    onTouchEnded: function() {
      this.log("onTouchEnded", this.__classId);
      return true;
    },
    onTouchCancelled: function() {
      return true;
    },
    addLayer: function(newLayer, isForceAdd) {
      var topLayer;
      topLayer = this.__topLayer || self._G_Toplayer;
      if (!topLayer) {
        this.error("this._topLayer is undefined!!!");
        return;
      }
      if (this.gettopLayer()._currLayer.__classId === newLayer.__classId && cz.baseLayer_canotReAdd[newLayer.__classId]) {
        self.$topic.publish(cz.MSG_SAME_ADD_UPDATE, newLayer);
        return;
      }
      if (newLayer.isForm()) {
        return topLayer.addForm(newLayer);
      } else if (newLayer.isAppend()) {
        return topLayer.appendLayer(newLayer);
      } else {
        return topLayer.addFirstLayer(newLayer, isForceAdd);
      }
    },
    isAppend: function() {
      return this.__isAppendLayer;
    },
    isForm: function() {
      if (this.__isForm !== void 0) {
        return this.__isForm;
      }
      return false;
    },
    getReturnParams: function() {
      return {
        returnParams: {
          layerName: this.__classId,
          returnParams: this.returnParams
        }
      };
    },
    tryInitPreInfo: function(params) {
      if (params && params.returnParams) {
        return this.returnParams = params.returnParams;
      }
    },
    tryReturnPre: function(cb, cbParams) {
      if (this.returnParams) {
        bearcat.getBean(this.returnParams.layerName).get(function(form) {
          this.addLayer(form);
          if (cb) {
            return cb.call(this, cbParams);
          }
        }, this, this.returnParams);
        return true;
      } else {
        if (cb) {
          return cb.call(this, cbParams);
        }
      }
    },

    /**
      * 根据tag删除子界面
     */
    removeByTag: function(tag) {
      var topLayer;
      topLayer = this.__topLayer || self._G_Toplayer;
      if (!topLayer) {
        return;
      }
      return topLayer.removeChildByTag(tag);
    },

    /**
      * 根据tag获取自界面
     */
    getByTag: function(tag) {
      var childlayer, topLayer;
      topLayer = this.__topLayer || self._G_Toplayer;
      if (!topLayer) {
        return void 0;
      }
      childlayer = topLayer.getChildByTag(tag);
      return childlayer;
    },
    gettopLayer: function() {
      var topLayer;
      topLayer = this.__topLayer || self._G_Toplayer;
      if (!topLayer) {
        return void 0;
      }
      return topLayer;
    },
    removeForm: function() {
      var children, i, j, lastChild, len, ref, results, topLayer;
      topLayer = this.__topLayer || self._G_Toplayer;
      if (!topLayer) {
        return;
      }
      children = topLayer.getChildren();
      len = children.length;
      results = [];
      for (i = j = ref = len; j >= 1; i = j += -1) {
        lastChild = children[i - 1];
        if (lastChild && typeof lastChild.isForm === 'function' && lastChild.isForm()) {
          results.push(lastChild.removeFromParent());
        } else {
          results.push(void 0);
        }
      }
      return results;
    },
    removeFormExceptSelf: function() {
      var children, i, j, lastChild, len, ref, results, topLayer;
      topLayer = this.__topLayer || self._G_Toplayer;
      if (!topLayer) {
        return;
      }
      children = topLayer.getChildren();
      len = children.length;
      results = [];
      for (i = j = ref = len; j >= 1; i = j += -1) {
        lastChild = children[i - 1];
        if (lastChild && typeof lastChild.isForm === 'function' && lastChild.isForm() && (lastChild.__classId !== this.__classId)) {
          results.push(lastChild.removeFromParent());
        } else {
          results.push(void 0);
        }
      }
      return results;
    },

    /**
      * 加载本 Layer 除构造函数之外所需的额外资源，完成后执行相应的回调函数
      *
      * @param {cc.Node} parent
      * @param {function} [optional] callback
      *
     */
    addTo: function(parent, cb) {
      var baseResources, ref;
      baseResources = (ref = typeof this.getBaseResources === "function" ? this.getBaseResources() : void 0) != null ? ref : void 0;
      if (baseResources) {
        self.$resourceUtil.load(baseResources, function() {
          parent.addChild(this);
          if (cb) {
            return cb.call(parent);
          }
        }, this);
      } else {
        parent.addChild(this);
        if (cb) {
          cb.call(parent);
        }
      }
    },

    /**
      * tableCellSizeForIndex
      * 如果单元格的大小并不一致，则需要 override 该方法
      * return {cc.size}
     */
    tableCellSizeForIndex: function(table, idx) {
      return this._cellSize;
    },

    /**
      * tableCellAtIndex
      * 具体的 Layer|Form 实现类，需实现 createTableCellPoints: (idx, cell) -> 方法，才能完成一个TableCell的实现工作
      * return {cc.TableViewCell}
     */
    tableCellAtIndex: function(table, idx) {
      var cell;
      cell = table.dequeueCell();
      if (!cell) {
        cell = new cc.TableViewCell();
      }
      this.createTableCellPoints(idx, cell);
      return cell;
    },
    numberOfCellsInTableView: function(table) {
      return 0;
    },

    /**
      * 记载ccb文件，创建的 Node 直接添加为 TableViewCell 的 child node
      * 同时将ccb中的事件回调方法转移到当前 Layer 上
      *
      * @param {String} file
      * @param {cc.TableViewCell} tableViewCell
      * @param {cc.Size} [optional] parentSize，如果为null，则默认为window size
      * @param {String} [optional] resourcePath，默认为 "res/ui/"
      * return {cc.Node}
     */
    registerOnSocketEvent: function(responseDefine, cb, once) {},

    /**
      * 发送Socket请求
      *
      * @param {GameProtocol.Message} req 请求指令
      * @param {cc.ControlButton|CCMenuItem} control 发出指令的按钮，当收到相应反馈后，自动执行对应的finishMenuEvent
      * @param {Boolean} isSyncMessage 是否同步指令，若是，则服务器端反馈的serial则与req.serial一致，若非，则为0 （例如战斗请求）
      *
     */
    send: function(req, control, isSyncMessage) {},
    _sendMessage: function(req, control, isSyncMessage) {},

    /**
      * 订阅某个Topic相关事件
      * Example:
      *   添加订阅
      *   @subscribe("AAA", (p1, p2) ->
            @log("AAA", p1, p2)
          )
      *   发出事件广播
          @topic.publish("AAA", "Google", 200)
      *
      * @param {String} topic
      * @param {Function} cb
      *
     */
    subscribe: function(topic, cb) {
      if (this._isTopicSubcribe === void 0) {
        self.$logger.error("You Should subscribe topic after BaseLayer.onEnter!!!");
        return;
      }
      this.topic.subscribe(topic, cb, this);
      return this._isTopicSubcribe = true;
    },
    setVisible: function(isVisible) {
      if (this._visible !== isVisible) {
        this._swallowTouches(isVisible);
      }
      return this._super(isVisible);
    },
    _swallowTouches: function(swallowTouches) {
      if (this._listener_base) {
        return this._listener_base.swallowTouches = swallowTouches;
      }
    },

    /**
      * 设置CCB LabelTTF 和 ControlButton 外描边
      * @param {cc.LabelTTF|cc.ControlButton} node
      * @param {cc.Color} strokeColor The color of stroke
      * @param {Number} strokeSize The size of stroke
      * @param {cc.Color} fillColor The fill color of the label
     */
    enableLabelStroke: function(node, strokeColor, strokeSize, fontFillColor) {
      if (node instanceof cc.ControlButton) {
        return this.ez.makeCCButtonTitleOutline(node, strokeColor, strokeSize, fontFillColor || node.getTitleColorForState(cc.CONTROL_STATE_NORMAL));
      } else if (node instanceof cc.LabelTTF) {
        return this.ez.makeCCBLabelOutline(node, strokeColor, strokeSize, fontFillColor || node.getColor());
      }
    },

    /**
      * 设置CCB LabelTTF 和 ControlButton 外描边为白色
      * @param {cc.LabelTTF|cc.ControlButton} node
      * @param {Number} strokeSize The size of stroke
      * @param {cc.Color} color The fill color of the label
      * Examples:
      *
      * 单个 CCNode
      *  @enableLabelStrokeWhite(@menuPlay, 2)
      * 多个 CCNode
          @enableLabelStrokeWhite([
            {
              node: @menuLogin
              strokeSize: 2
            },
            {
              node: @menuCreate
              strokeSize: 4
            }
          ])
     */
    enableLabelStrokeWhite: function(node, strokeSize, color) {
      var j, len1, results, value;
      if (cc.isArray(node)) {
        results = [];
        for (j = 0, len1 = node.length; j < len1; j++) {
          value = node[j];
          results.push(this.enableLabelStroke(node.node, cc.color.WHITE, node.strokeSize, node.color));
        }
        return results;
      } else {
        return this.enableLabelStroke(node, cc.color.WHITE, strokeSize, color);
      }
    },

    /**
      * 设置CCB LabelTTF 和 ControlButton 外描边为黑色
      * @param {cc.LabelTTF|cc.ControlButton} node
      * @param {Number} strokeSize The size of stroke
      * @param {cc.Color} color The fill color of the label
      * Examples:
      * 单个 CCNode
      *  @enableLabelStrokeBlack(@menuPlay, 2)
      * 多个 CCNode
          @enableLabelStrokeBlack([
            {
              node: @menuLogin
              strokeSize: 2
            },
            {
              node: @menuCreate
              strokeSize: 4
            }
          ])
     */
    enableLabelStrokeBlack: function(node, strokeSize, color) {
      var j, len1, results, value;
      if (cc.isArray(node)) {
        results = [];
        for (j = 0, len1 = node.length; j < len1; j++) {
          value = node[j];
          results.push(this.enableLabelStroke(value.node, cc.color.BLACK, value.strokeSize, value.color));
        }
        return results;
      } else {
        return this.enableLabelStroke(node, cc.color.BLACK, strokeSize, color);
      }
    },
    enableLabelStrokeCommon: function(node, strokeSize, color, strokeColor) {
      var j, len1, results, value;
      if (!strokeSize) {
        strokeSize = 2;
      }
      if (!strokeColor) {
        strokeColor = cz.COLOR_STROKE1;
      }
      if (cc.isArray(node)) {
        results = [];
        for (j = 0, len1 = node.length; j < len1; j++) {
          value = node[j];
          results.push(this.enableLabelStroke(value.node, strokeColor, value.strokeSize, value.color));
        }
        return results;
      } else {
        return this.enableLabelStroke(node, strokeColor, strokeSize, color);
      }
    },

    /*
    * 递归设置节点的孩子节点的描边，暂时只支持通用的描边颜色，宽度为2
     */
    addChildrenStroke: function(root) {
      var children, j, len1, node, results;
      if (root instanceof cc.LabelTTF || root instanceof cc.ControlButton) {
        this.enableLabelStrokeCommon(root, 2);
      }
      children = root.getChildren();
      results = [];
      for (j = 0, len1 = children.length; j < len1; j++) {
        node = children[j];
        results.push(this.addChildrenStroke(node));
      }
      return results;
    },
    getTopClassLayer: function() {
      var topLayerClass;
      topLayerClass = bearcat.getBean("topLayer");
      return topLayerClass;
    },
    isFirstGoShowForm: function(params) {
      if (params && params.isGet) {
        return true;
      }
      return false;
    },
    isNumEnough: function(type, id, needcount) {
      var count, dapju;
      if (type === cz.JL_TYPE.DAOJU) {
        dapju = this.userData.getDaojuById(id);
        count = dapju && dapju.daojuCount || 0;
        if (count >= needcount) {
          return true;
        }
      }
      this.lackHint(id, needcount);
      return false;
    },
    setZhongzuPic: function(node, level) {
      return this.loadResource([cz.zhongzuLevel[level]], function() {
        return node.setTexture(cz.zhongzuLevel[level]);
      }, void 0, false);
    },
    createEditBox: function(nodeInput, HOLD_STR, isCenter, MAX_LENGTH) {
      var editbox;
      editbox = this.display.newEditBox(nodeInput.getContentSize(), new cc.Scale9Sprite("pika_tongyong_kuozhan.png"));
      nodeInput.addChild(editbox);
      editbox.setAnchorPoint(cc.p(0, 0));
      editbox.setPlaceHolder(HOLD_STR);
      editbox.setPlaceholderFont(cz.UI_FONT_DEFAULT);
      editbox.setPlaceholderFontSize(22);
      editbox.setPosition(cc.p(2, 0));
      editbox.setFontSize(24);
      editbox.setDelegate(this);
      editbox.setFontColor(cc.color(255, 255, 255));
      editbox.setInputMode(cc.EDITBOX_INPUT_MODE_SINGLELINE);
      editbox.setInputFlag(cc.EDITBOX_INPUT_FLAG_SENSITIVE);
      editbox.setMaxLength(MAX_LENGTH || 15);
      return this.editbox = editbox;
    }
  });
};

BaseLayer.prototype.getMessageName = function(msg) {
  var code, defineMap, key, msgCode, msgDefine;
  defineMap = this.__messageDefineMap;
  if (!defineMap) {
    defineMap = {};
    for (key in GameProtocol) {
      msgDefine = GameProtocol[key];
      code = msgDefine.MAIN_TYPE << 8 | msgDefine.SUB_TYPE;
      defineMap[code] = key;
    }
    this.__messageDefineMap = defineMap;
  }
  msgCode = msg.messageCode;
  if (!msgCode) {
    msgCode = msg.mainType << 8 | msg.subType;
  }
  return defineMap[msgCode];
};

BaseLayer.prototype.makeEmptyFirstLayer = function() {
  var layer, sp;
  layer = new this.ctor(this);
  layer._hideHomeBar = true;
  sp = layer.display.newSprite('res/ui/' + 'zd_caocj.jpg', 360, 640);
  layer.addRegisterImg('res/ui/' + 'zd_caocj.jpg');
  layer.addChild(sp);
  return layer;
};

BaseLayer.prototype.get = function() {
  return new this.ctor();
};
